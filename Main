package project;

import javax.swing.*;
import java.awt.*;
import java.sql.*;

public class Main {
  private JPanel mainPanel, slidingPanel, loginPanel, registerPanel;
  private JButton toggleButton;
  private boolean isLoginVisible = false;
  private final String imagePath = "C:\\Users\\My PC\\Downloads\\lendify.png";
  public Main() {
	
	  // Frame setup
      JFrame mainFrame = new JFrame("Login/Register");
      mainFrame.setSize(1000, 800);
      mainFrame.setLayout(null);
      mainFrame.setResizable(false);
      mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      
      // Main panel (WHOLE PANEL ITO YUNG MAKIKITA MO PAG RUN)
      mainPanel = new JPanel(null);
      mainPanel.setBounds(0, 0, 1000, 800);
      mainFrame.add(mainPanel);
      initSlidingPanel();
      initRegisterPanel();
      initLoginPanel();
      mainPanel.add(registerPanel);
      mainPanel.add(loginPanel);
      loginPanel.setVisible(false);
      toggleButton.addActionListener(e -> togglePanel());
      mainFrame.setVisible(true);
  }
  
  
  public class DatabaseConnection {
	    private static final String URL = "jdbc:mysql://localhost:3306/lendify"; 
	    private static final String USER = "root"; 
	    private static final String PASSWORD = ""; 

	    public static Connection getConnection() throws SQLException {
	        return DriverManager.getConnection(URL, USER, PASSWORD);
	    }
	}
  
  
  private void initSlidingPanel() {
      slidingPanel = new JPanel(null);
      slidingPanel.setBounds(0, 0, 500, 800);
      slidingPanel.setBackground(new Color(34, 153, 84));
     
      // Logo
      ImageIcon originalIcon = new ImageIcon(imagePath);
      Image scaledLogo = originalIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
      JLabel logoLabel = new JLabel(new ImageIcon(scaledLogo));
      logoLabel.setBounds(0, 0, 100, 100);
      slidingPanel.add(logoLabel);
     
      // Welcome
      int panelWidth = 500;
      int totalComponentsHeight = 30 * 3 + 20 * 2;
      int startY = (800 - totalComponentsHeight) / 2;
      
      JLabel welcome = new JLabel("Welcome to Lendify", SwingConstants.CENTER);
      welcome.setForeground(Color.WHITE);
      welcome.setFont(new Font("Arial", Font.BOLD, 22));
      welcome.setBounds(0, 100, 350, 100);
      slidingPanel.add(welcome);
      
     
      JLabel login = new JLabel("Already have an account? Login", SwingConstants.CENTER);
      login.setForeground(Color.WHITE);
      login.setFont(new Font("Arial", Font.BOLD, 22));
      login.setBounds(62, 140, 350, 100);
      slidingPanel.add(login);
      
    
      toggleButton = new JButton("SIGN IN");
      toggleButton.setBounds(192, 220, 90, 30);
      slidingPanel.add(toggleButton);
      mainPanel.add(slidingPanel);
  }
  
  private void initRegisterPanel() {
	    registerPanel = new JPanel(null);
	    registerPanel.setBounds(500, 0, 500, 800);
	    registerPanel.setBackground(Color.WHITE);
	    

	    JLabel title = new JLabel("Create Account");
	    title.setFont(new Font("Arial", Font.BOLD, 22));
	    title.setBounds(170, 100, 200, 30);
	    registerPanel.add(title);
	    
	    // Personal Information
	    JLabel fullNameLabel = new JLabel("Full Name: ");
	    fullNameLabel.setBounds(50, 170, 200, 30);
	    registerPanel.add(fullNameLabel);
 
	    JTextField fullNameField = new JTextField();
	    fullNameField.setBounds(165, 170, 200, 30);
	    registerPanel.add(fullNameField);
	    
	    
	    JLabel emailLabel = new JLabel("Email: ");
	    emailLabel.setBounds(50, 220, 200, 30);
	    registerPanel.add(emailLabel);
	    
	    JTextField emailField = new JTextField();
	    emailField.setBounds(165, 220, 200, 30);
	    registerPanel.add(emailField);
	    
	    
	    JLabel phoneLabel = new JLabel("Phone Number: ");
	    phoneLabel.setBounds(50, 270, 200, 30);
	    registerPanel.add(phoneLabel);
	    
	    JTextField phoneField = new JTextField("+63");
	    phoneField.setBounds(165, 270, 200, 30);
	    registerPanel.add(phoneField);
	    
	    

	    JLabel dobLabel = new JLabel("Date of Birth:");
	    dobLabel.setBounds(50, 320, 200, 30);
	    registerPanel.add(dobLabel);
	    
	    JPanel dobPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
	    dobPanel.setBackground(Color.WHITE);
	    dobPanel.setBounds(165, 320, 250, 30);
	    
	    String[] days = new String[31];
	    for(int i=1; i<=31; i++) days[i-1] = String.valueOf(i);
	    dobPanel.add(new JComboBox<>(days));
	    dobPanel.add(new JLabel("/"));
	    dobPanel.add(new JComboBox<>(new String[]{"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"}));
	    dobPanel.add(new JLabel("/"));
	    dobPanel.add(new JComboBox<>(new String[]{"2000","2001","2002","2003","2004","2005"}));
	    registerPanel.add(dobPanel);
	    
	    
	    // Financial Information
	    JLabel occupationLabel = new JLabel("Occupation: ");
	    occupationLabel.setBounds(50, 370, 200, 30);
	    registerPanel.add(occupationLabel);
	    
	    JComboBox<String> occupationDropdown = new JComboBox<>(new String[]{
	        "Select Occupation",
	        "Student",
	        "Employee",
	        "Self-Employed",
	        "Freelancer",
	        "Other"
	    });
	    occupationDropdown.setBounds(165, 370, 200, 30);
	    registerPanel.add(occupationDropdown);
	    
	    
	    JLabel incomeLabel = new JLabel("Monthly Income ($): ");
	    incomeLabel.setBounds(50, 420, 200, 30);
	    registerPanel.add(incomeLabel);
	      
	    JTextField incomeField = new JTextField();
	    incomeField.setBounds(165, 420, 200, 30);
	    registerPanel.add(incomeField);
	    
	    
	    JLabel incomesourceLabel = new JLabel("Income Source: ");
	    incomesourceLabel.setBounds(50, 470, 200, 30);
	    registerPanel.add(incomesourceLabel);
	    
	    JComboBox<String> incomesourceDropdown = new JComboBox<>(new String[]{
	        "Select Source",
	        "Salary",
	        "Business",
	        "Allowance",
	        "Investments",
	        "Other"
	    });
	    incomesourceDropdown.setBounds(165, 470, 200, 30);
	    registerPanel.add(incomesourceDropdown);
	    
	    
	    JLabel passwordLabel = new JLabel("Password: ");
	    passwordLabel.setBounds(50, 520, 200, 30);
	    registerPanel.add(passwordLabel);
	    
	    JPasswordField passwordField = new JPasswordField();
	    passwordField.setBounds(165, 520, 200, 30);
	    registerPanel.add(passwordField);
	    
	    
	    JLabel confirmPasswordLabel = new JLabel("Confirm Password: ");
	    confirmPasswordLabel.setBounds(50, 570, 200, 30);
	    registerPanel.add(confirmPasswordLabel);
	    
	    JPasswordField confirmPasswordField = new JPasswordField();
	    confirmPasswordField.setBounds(165, 570, 200, 30);
	    registerPanel.add(confirmPasswordField);
	    
	    
	    // Upload Button
	    JLabel idProofLabel = new JLabel("ID Proof: ");
	    idProofLabel.setBounds(50, 620, 200, 30);
	    registerPanel.add(idProofLabel);
	    
	    JButton uploadBtn = new JButton("Upload ID Proof");
	    uploadBtn.setBounds(165, 620, 150, 30);
	    uploadBtn.addActionListener(e -> {
	        JFileChooser fileChooser = new JFileChooser();
	        int result = fileChooser.showOpenDialog(null);
	        if(result == JFileChooser.APPROVE_OPTION) {
	            JOptionPane.showMessageDialog(null, "File selected: " +
	                fileChooser.getSelectedFile().getName());
	        }
	    });
	    registerPanel.add(uploadBtn);
	    
	    
	    JButton signUp = new JButton("Sign Up");
	    signUp.setBounds(170, 720, 150, 30);
	    signUp.addActionListener(e -> {
	        String email = emailField.getText();
	        String phone = phoneField.getText();
	        String password = new String(passwordField.getPassword());
	        String confirmPassword = new String(confirmPasswordField.getPassword());

	        // Email REGEX
	        if (!email.matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$")) {
	            JOptionPane.showMessageDialog(null, "Invalid email format!");
	            return;
	        }

	        // Phone REGEX (+63 followed by 10 digits)
	        if (!phone.matches("^\\+63\\d{10}$")) {
	            JOptionPane.showMessageDialog(null, "Phone number must start with +63 followed by 10 digits!");
	            return;
	        }

	        // Password REGEX (minimum 8 characters, at least 1 uppercase, 1 lowercase, 1 number, and 1 special character)
	        if (!password.matches("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$")) {
	            JOptionPane.showMessageDialog(null, "Password must be at least 8 characters, with uppercase, lowercase, number, and special character!");
	            return;
	        }

	        // Confirm password check
	        if (!password.equals(confirmPassword)) {
	            JOptionPane.showMessageDialog(null, "Passwords do not match!");
	            return;
	        }

	        
	        try (Connection conn = DatabaseConnection.getConnection()) {
	            String query = "INSERT INTO credentials (fullname, email, phone, dob, occupation, income, income_source, password) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
	            PreparedStatement pstmt = conn.prepareStatement(query);

	            // Para sa date of birth kasi hindi naka date format
	            String fullName = fullNameField.getText();
	            String day = (String)((JComboBox<?>)dobPanel.getComponent(0)).getSelectedItem();
	            String month = (String)((JComboBox<?>)dobPanel.getComponent(2)).getSelectedItem();
	            String year = (String)((JComboBox<?>)dobPanel.getComponent(4)).getSelectedItem();

	            int monthNum = switch (month) {
	                case "Jan" -> 1;
	                case "Feb" -> 2;
	                case "Mar" -> 3;
	                case "Apr" -> 4;
	                case "May" -> 5;
	                case "Jun" -> 6;
	                case "Jul" -> 7;
	                case "Aug" -> 8;
	                case "Sep" -> 9;
	                case "Oct" -> 10;
	                case "Nov" -> 11;
	                case "Dec" -> 12;
	                default -> 1;
	            };

	            String dob = String.format("%s-%02d-%02d", year, monthNum, Integer.parseInt(day));

	            String occupation = occupationDropdown.getSelectedItem().toString();
	            String income = incomeField.getText();
	            String incomeSource = incomesourceDropdown.getSelectedItem().toString();

	            pstmt.setString(1, fullName);
	            pstmt.setString(2, email);
	            pstmt.setString(3, phone);
	            pstmt.setString(4, dob); 
	            pstmt.setString(5, occupation);
	            pstmt.setString(6, income);
	            pstmt.setString(7, incomeSource);
	            pstmt.setString(8, password);

	            int rowsInserted = pstmt.executeUpdate();
	            if (rowsInserted > 0) {
	                JOptionPane.showMessageDialog(null, "Registration successful!");
	            } else {
	                JOptionPane.showMessageDialog(null, "Registration failed!");
	            }
	        } catch (SQLException ex) {
	            ex.printStackTrace();
	            JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage());
	        }  
	    });
	    registerPanel.add(signUp);
	}
  
  
  private String getMonthNumber(String month) {
	return null;
}

  private void initLoginPanel() {
	    loginPanel = new JPanel(null);
	    loginPanel.setBounds(0, 0, 500, 800);
	    loginPanel.setBackground(Color.WHITE);

	    JLabel title = new JLabel("Login");
	    title.setFont(new Font("Arial", Font.BOLD, 22));
	    title.setBounds(120, 100, 200, 30);
	    loginPanel.add(title);

	    JLabel username = new JLabel("Username");
	    username.setBounds(120, 170, 200, 30);
	    loginPanel.add(username);

	    JTextField tfUsername = new JTextField();
	    tfUsername.setBounds(120, 200, 200, 30);
	    loginPanel.add(tfUsername);

	    JLabel pass = new JLabel("Password");
	    pass.setBounds(120, 270, 200, 30);
	    loginPanel.add(pass);

	    JPasswordField tfPassword = new JPasswordField();
	    tfPassword.setBounds(120, 300, 200, 30);
	    loginPanel.add(tfPassword);

	    JButton signIn = new JButton("Sign In");
	    signIn.setBounds(170, 400, 100, 30);

	    signIn.addActionListener(e -> {
	        String email = tfUsername.getText().trim();
	        String password = new String(tfPassword.getPassword()).trim();

	        if (email.isEmpty() || password.isEmpty()) {
	            JOptionPane.showMessageDialog(null, "Please fill all fields");
	            return;
	        }

	        try (Connection conn = DatabaseConnection.getConnection()) {
	            String query = "SELECT * FROM credentials WHERE email = ? AND password = ?";
	            PreparedStatement pstmt = conn.prepareStatement(query);
	            pstmt.setString(1, email);
	            pstmt.setString(2, password);
	            ResultSet rs = pstmt.executeQuery();
	            
	            if (rs.next()) {
	                JOptionPane.showMessageDialog(null, "Login successful!");
	                String fullName = rs.getString("fullname");
	                
	                // Close the login window and open the dashboard
	                SwingUtilities.invokeLater(() -> {
	                    Window parentWindow = SwingUtilities.getWindowAncestor(loginPanel);
	                    Dashboard dashboard = new Dashboard(fullName);
	                    dashboard.setVisible(true);
	                    
	                    if (parentWindow != null) {
	                        parentWindow.dispose();
	                    }
	                });
	            } else {
	                JOptionPane.showMessageDialog(null, "Invalid email or password.");
	            }
	        } catch (SQLException ex) {
	            ex.printStackTrace();
	            JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage());
	        }
	    });
	    loginPanel.add(signIn);
	}

  
  private void togglePanel() {
      new Thread(() -> {
          int step = 5;
          int delay = 5;
          if (!isLoginVisible) {
              while (slidingPanel.getX() < 500) {
                  slidingPanel.setLocation(slidingPanel.getX() + step, 0);
                  sleep(delay);
              }
              SwingUtilities.invokeLater(() -> {
                  registerPanel.setVisible(false);
                  loginPanel.setVisible(true);
                  toggleButton.setText("SIGN UP");
                  isLoginVisible = true;
              });
          } else {
              while (slidingPanel.getX() > 0) {
                  slidingPanel.setLocation(slidingPanel.getX() - step, 0);
                  sleep(delay);
              }
              SwingUtilities.invokeLater(() -> {
                  loginPanel.setVisible(false);
                  registerPanel.setVisible(true);
                  toggleButton.setText("SIGN IN");
                  isLoginVisible = false;
              });
          }
      }).start();
  }
  private void sleep(int millis) {
      try {
          Thread.sleep(millis);
      } catch (InterruptedException ignored) {
      }
  }
  public static void main(String[] args) {
      new Main();
  }
}
